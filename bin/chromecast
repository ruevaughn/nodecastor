#!/usr/bin/env node
'use strict';

process.env['AVAHI_COMPAT_NOWARN'] = 1;

var util = require('util'),
    winston = require('winston'),
    _ = require('lodash'),
    nodecastor = require('..'),
    pjson = require('../package.json'),
    ArgumentParser = require('argparse').ArgumentParser,
    parser = new ArgumentParser({
      version: pjson.version,
      description: 'Discover and interact with Google Chromecast devices.'
    });
const { LEVEL, MESSAGE, SPLAT } = require('triple-beam');

parser
  .addArgument(['-d', '--debug'], {
    help: 'enable debugging',
    action: 'storeTrue'
  });

var subparsers = parser.addSubparsers({
  dest: 'command'
});

// Helper for all commands requesting a Chromecast and an optional
// port
function addHostAndPort(item) {
  item
    .addArgument(['host'], {
      help: 'Chromecast IP address',
      metavar: 'HOST'
    });
  item
    .addArgument(['-p', '--port'], {
      help: 'Chromecast port',
      metavar: 'PORT',
      defaultValue: 8009
    });
}

// Helper for commands just sending a remote URL on some namespace for some appID
function launchUrl(name, parserOptions, applicationID, namespace) {
  var parser = subparsers.addParser(name, parserOptions);
    addHostAndPort(parser);
    parser.addArgument(['url'], {
      help: 'receiver URL',
      metavar: 'URL'
    });

    return function(args) {
      var c = getChromecast();
      c.on('connect', function() {
        c.application(applicationID, function(err, app) {
          if (err) {
            logger.error('Unable to find application:', err.message);
            c.stop();
            return;
          }
          app.run(namespace, function(err, session) {
            if (err) {
              logger.error('Unable to execute application:', err.message);
              c.stop();
              return;
            }
            session.send({ url: args.url });
            c.stop();
          });
        });
      });
    };
}

var subcommands = {

  // discover command
  discover: (function() {
    var discover = subparsers.addParser('discover', {
      help: 'discover Chromecast devices on the network',
      description: 'List and show various information on Google Chromecast present on the network.'
    });

    return function(args) {
      nodecastor.scan({ logger: logger })
        .on('online', function(device) {
          logger.info('+ %s (%s:%d) [%s]',
                      device.friendlyName,
                      device.address, device.port,
                      device.id);
        })
        .on('offline', function(device) {
          logger.info('- %s (%s:%d) [%s]',
                      device.friendlyName,
                      device.address, device.port,
                      device.id);
        })
        .start();
    };
  })(),

  // status command
  status: (function() {
    var status = subparsers.addParser('status', {
      help: 'status of a Chromecast device',
      description: 'get status from a Chromecast device'
    });
    addHostAndPort(status);

    return function(args) {
      var c = getChromecast();
      c.on('connect', function() {
        c.status(function(err, status) {
          if (err) {
            logger.error('Unable to get status:', err.message);
          } else {
            logger.info('Status received:', status);
          }
          c.stop();
        });
      });
    };
  })(),

  // watch command
  watch: (function() {
    var watch = subparsers.addParser('watch', {
      help: 'watch a Chromecast device',
      description: 'watch and display any event hapenning on a Chromecast device'
    });
    addHostAndPort(watch);
    watch.addArgument(['app'], {
      help: 'application ID',
      nargs: '?',
      metavar: 'APPID'
    });

    return function(args) {
      var c = getChromecast();
      c.on('connect', function() {
        if (args.app) {
          c.application(args.app, function(err, app) {
            if (err) {
              logger.error('Unable to get application:', err.message);
              c.stop();
              return;
            }
            app.run(null, function(err, session) {
              if (err) {
                logger.error('Unable to start application:', err.message);
                c.stop();
                return;
              }
              session.on('message', function(message) {
                logger.info('Session message received:', message);
              });
            });
          });
        } else {
          c.status(function(err, status) {
            if (err) {
              logger.error('Unable to query status:', err.message);
              c.stop();
              return;
            }
            c.on('message', function(message) {
              logger.info('Message received:', message);
            });
          });
        }
      });
    };
  })(),

  // Run an app
  run: (function() {
    var run = subparsers.addParser('run', {
      help: 'run an application',
      description: 'run the provided application on a Chromecast device'
    });
    addHostAndPort(run);
    run.addArgument(['app'], {
      help: 'application ID',
      metavar: 'APPID'
    });
    run.addArgument(['--namespace'], {
      help: 'namespace to use when running the application',
      metavar: 'NS'
    });

    return function(args) {
      var c = getChromecast();
      c.on('connect', function() {
        c.application(args.app, function(err, app) {
          if (err) {
            logger.error('Unable to get application:', err.message);
            c.stop();
          } else {
            if (args.namespace) {
              app.run(args.namespace, function(err, session) {
                if (err) {
                  logger.error('Unable to start application:', err.message);
                } else {
                  session.stop();
                }
                c.stop();
              });
            } else {
              app.run(null);
              c.stop();
            }
          }
        });
      });
    };
  })(),

  // Use hello app
  hello: (function() {
    var hello = subparsers.addParser('hello', {
      help: 'display some arbitrary text',
      description: 'use the HelloText receiver to display some text'
    });
    addHostAndPort(hello);
    hello.addArgument(['text'], {
      help: 'text to display',
      metavar: 'TEXT',
      nargs: '+'
    });

    return function(args) {
      var c = getChromecast();
      var applicationID = '794B7BBF';
      var namespace = 'urn:x-cast:com.google.cast.sample.helloworld';
      c.on('connect', function() {
        c.application(applicationID, function(err, app) {
          if (err) {
            logger.error('Unable to find HelloText application:', err.message);
            c.stop();
          } else {
            app.run(namespace, function(err, session) {
              if (err) {
                logger.error('Unable to start HelloText application:', err.message);
                c.stop();
              } else {
                session.send(args.text.join(' '), function(err, message) {
                  if (err) {
                    logger.error('Unable to send hello message:', err.message);
                    c.stop();
                  } else {
                    logger.info('Message delivered:', message);
                    setTimeout(function() {
                      c.stop();
                    }, 10000);
                  }
                });
              }
            });
          }
        });
      });
    };
  })(),

  // Tic Tac Toe
  tictactoe: (function() {
    var tictactoe = subparsers.addParser('tictactoe', {
      help: 'join a Tic Tac Toe game',
      description: 'join an existing Tic Tac Toe game and play random moves'
    });
    addHostAndPort(tictactoe);

    return function(args) {
      var c = getChromecast(),
          applicationID = 'BFEBD3F1',
          namespace = 'urn:x-cast:com.google.cast.demo.tictactoe';
      c.on('connect', function() {
        var board = [],
            player;
        c.application(applicationID, function(err, app) {
          if (err) {
            logger.error('Unable to find TicTacToe application:', err.message);
            c.stop();
            return;
          }
          app.join(namespace, function(err, session) {
            if (err) {
              logger.error('Unable to find a running session:', err.message);
              c.stop();
              return;
            }
            logger.info('Found the game!');

            function play() {
              // Which moves are available?
              var next = _.filter(_.shuffle(_.map(board, function(v, idx) {
                if (v === 0) return idx;
                return null;
              })), null)[0];
              var row = next % 3,
                  col = Math.floor(next / 3);
              logger.info('I will move to:', row, col);
              session.send({
                command: 'move',
                row: row,
                column: col
              });
            }

            session.on('message', function(message) {
              switch (message.event) {
              case 'error':
                logger.error('An error occurred:', message.message);
                c.stop();
                break;
              case 'joined':
                // Get the layout
                player = message.player;
                session.send({ command: 'board_layout_request' });
                break;
              case 'board_layout_response':
                board = message.board;
                if (player === 'X') play();
                break;
              case 'moved':
                if (message.game_over) {
                  logger.info('Game is over.');
                  c.stop();
                  break;
                }
                board[message.row + message.column*3] = message.player;
                if (message.player === player) {
                  // It's us, do nothing
                  break;
                };
                play();
                break;
              }
            });
            session.send({
              command: 'join',
              name: 'nodecastor'
            });
          });
        });
      });
    };
  })(),

  // Run dashkiosk application with a given URL
  dashkiosk: launchUrl('dashkiosk', {
    help: 'run Dashkiosk receiver',
    description: 'execute Dashkiosk receiver with the given URL'
  }, '5E7A2C2C', 'urn:x-cast:com.deezer.cast.dashkiosk'),

  vlc: launchUrl('vlc', {
    help: 'run VLC receiver',
    desvription: 'execute VLC receiver with the given URL'
  }, '6E0BEF82', 'urn:x-cast:org.videolan.cast.receiver')

};

var args = parser.parseArgs();

const myFormat = winston.format((info) => {

  if (
    info[SPLAT]
    && info[SPLAT].length
    && typeof info[SPLAT][0] === 'string'
  ) {
    // simple string arg case
    info.message += ' ' + info[SPLAT].join(' ');

    // this isn't 100% correct, but should cover our usage
    for (let i = 0; i < info[SPLAT][0].length; ++i) {
      delete info[i];
    }

    delete info[SPLAT];
    return info;
  }

  const extras = Object.assign({}, info, {
    level: undefined,
    message: undefined,
    splat: undefined,
  });

  delete extras[LEVEL];
  delete extras[MESSAGE];
  delete extras[SPLAT];

  for (const k of Object.keys(extras)) {
    if (extras[k] === undefined) {
      delete extras[k];
    } else {
      delete info[k];
    }
  }

  if (Object.keys(extras).length) {
    info.message += '\n' + util.inspect(extras, false, null, true);
  }

  return info;
});

// Logging
var logger = winston.createLogger({
  level: args.debug?'debug':'info',
  format: winston.format.combine(
    winston.format.splat(),
    winston.format.colorize(),
    myFormat(),
    winston.format.simple(),
  ),
  transports: [
    new winston.transports.Console({
      silent: false
    })
  ]
});

function getChromecast() {
  var c = new nodecastor.CastDevice({ address: args.host,
                                      port: args.port,
                                      logger: logger,
                                      reconnect: false });
  c
    .on('error', function(err) {
      logger.warn('Error received:', err.message);
    })
    .on('disconnect', function() {
      logger.warn('Got disconnected from device');
    });
  return c;
}

subcommands[args.command](args);
